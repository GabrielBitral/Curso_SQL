Números
Integer
Real
Serial(Valor inteiro positivo, com autoincremento)
Numeric(É possivel definir o número de casas decimais que serão utilizados)
--------
Caracteres
Varchar(n)
Char(n)
Text
--------
Boolean type
Boolean
--------
Data e Hora
Date
Time
Timestamp(data e hora)
--------

CREATE TABLE aluno(
	id SERIAL,
	nome VARCHAR(255),
	cpf CHAR(11),
	observação TEXT,
	idade INTEGER,
	dinheiro NUMERIC(10,2),
	altura REAL,
	ativo BOOLEAN,
	dataNascimento DATE,
	hora_aula TIME,
	matriculado TIMESTAMP
);

SELECT * FROM aluno;

INSERT INTO aluno(
	nome,
	cpf,
	observação,
	idade,
	dinheiro,
	altura,
	ativo,
	dataNascimento,
	hora_aula,
	matriculado
) VALUES(
	'Gabriel', 
	'12345678901',
	'Lorem Ipsum is simply dummy
	text of the printing and type
	setting industry. Lorem Ipsum
	has been the industry s standard
	dummy text ever since the 1500s,
	when an unknown printer took a 
	galley of type and scrambled it 
	to make a type specimen book. It
	has survived not only five 
	centuries, but also the leap 
	into electronic typesetting, 
	remaining essentially unchanged.',
	21,
	100.80,
	1.76,
	TRUE,
	'2000-08-16',
	'17:30:00',
	'2022-05-26 11:29:40'
);

SELECT * FROM aluno;

UPDATE aluno
	SET nome = 'Nico',
	cpf = '10987654321',
	observação = 'teste',
	idade = 22,
	dinheiro = 15.23,
	ativo = FALSE,
	dataNascimento = '1990-10-10',
	hora_aula = '13:00:00',
	matriculado = '2022-01-02 15:00:00'
WHERE id = 1;

SELECT * FROM aluno WHERE nome = 'Nico';

DELETE FROM aluno WHERE nome = 'Nico';

SELECT nome AS "Nome do Aluno",
	idade,
	matriculado AS quando_se_matriculou
FROM aluno;

INSERT INTO aluno (nome) VALUES ('Vinicius Dias');
INSERT INTO aluno (nome) VALUES ('Nico Steppat');
INSERT INTO aluno (nome) VALUES ('João Roberto');
INSERT INTO aluno (nome) VALUES ('Diego');

SELECT * 
FROM aluno
WHERE nome LIKE '%i%a%';

SELECT * FROM aluno 
WHERE idade BETWEEN 11 AND 21;

SELECT * 
FROM aluno 
WHERE nome LIKE 'Diego'
OR nome LIKE 'Rodrigo'
OR nome LIKE 'Nico%';

DROP TABLE curso;

CREATE TABLE curso(
	id INTEGER PRIMARY KEY,
	nome VARCHAR(255) NOT NULL
);

INSERT INTO curso(id, nome) VALUES (1, 'HTML');
INSERT INTO curso(id, nome) VALUES (2, 'JavaScript');

SELECT * FROM curso;

DROP TABLE aluno;

CREATE TABLE aluno(
	id SERIAL PRIMARY KEY,
	nome VARCHAR(255) NOT NULL
);

INSERT INTO aluno (nome) VALUES ('Diogo');
INSERT INTO aluno (nome) VALUES ('Vinicius');
INSERT INTO aluno (nome) VALUES ('João');

CREATE TABLE aluno_curso(
	aluno_id INTEGER,
	curso_id INTEGER,
	PRIMARY KEY(aluno_id, curso_id),
	FOREIGN KEY(aluno_id) 
	REFERENCES aluno(id),
	
	FOREIGN KEY(curso_id) 
	REFERENCES curso(id)
)

DROP TABLE aluno_curso;

INSERT INTO aluno_curso(aluno_id, curso_id) VALUES (1,1);
INSERT INTO aluno_curso(aluno_id, curso_id) VALUES (2,1);
INSERT INTO aluno_curso(aluno_id, curso_id) VALUES (2,2);
INSERT INTO aluno_curso(aluno_id, curso_id) VALUES (3,1);
INSERT INTO aluno_curso(aluno_id, curso_id) VALUES (1,3);

SELECT * FROM aluno WHERE id = 1;
SELECT * FROM curso WHERE id = 1;

SELECT aluno.nome AS "Nome do Aluno",
	curso.nome AS curso
FROM aluno
JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
JOIN curso ON curso.id = aluno_curso.curso_id;

INSERT INTO aluno(nome) VALUES ('Nico');

INSERT INTO curso(id ,nome) VALUES (3, 'CSS');

SELECT aluno.nome AS "Nome do Aluno",
	curso.nome AS curso
FROM aluno
FULL JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
FULL JOIN curso ON curso.id = aluno_curso.curso_id;

SELECT aluno.nome AS "Nome do Aluno",
	curso.nome AS curso
FROM aluno
CROSS JOIN curso;

CREATE TABLE aluno_curso(
	aluno_id INTEGER,
	curso_id INTEGER,
	PRIMARY KEY(aluno_id, curso_id),
	FOREIGN KEY(aluno_id) 
	REFERENCES aluno(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
	
	FOREIGN KEY(curso_id) 
	REFERENCES curso(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
)

SELECT * FROM aluno_curso;

UPDATE aluno
SET id = 20
WHERE id = 4;

SELECT 
aluno.id AS aluno_id,
aluno.nome AS "Nome do Aluno",
curso.id AS curso_id,
curso.nome AS curso
FROM aluno
JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
JOIN curso ON curso.id = aluno_curso.curso_id;

CREATE TABLE funcionarios(
    id SERIAL PRIMARY KEY,
    matricula VARCHAR(10),
    nome VARCHAR(255),
    sobrenome VARCHAR(255)
);

INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M001', 'Diogo', 'Mascarenhas');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M002', 'Vinícius', 'Dias');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M003', 'Nico', 'Steppat');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M004', 'João', 'Roberto');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M005', 'Diogo', 'Mascarenhas');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M006', 'Alberto', 'Martins');

SELECT *
    FROM funcionarios
    ORDER BY 4 DESC, nome DESC, 2
	
SELECT 
aluno.id AS aluno_id,
aluno.nome AS "Nome do Aluno",
curso.id AS curso_id,
curso.nome AS curso
FROM aluno
JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
JOIN curso ON curso.id = aluno_curso.curso_id
ORDER BY aluno.nome DESC, curso.nome;

INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (20, 3);

SELECT * 
FROM funcionarios 
ORDER BY id
LIMIT 5
OFFSET 2;

SELECT COUNT(id),
sum(id),
MAX(id),
MIN(id),
ROUND(AVG(id), 0)
FROM funcionarios;

SELECT DISTINCT nome,
sobrenome,
COUNT(id)
FROM funcionarios
GROUP BY 1, 2
ORDER BY nome;

SELECT curso.nome,
COUNT(aluno.id)
FROM aluno
JOIN aluno_curso ON aluno.id = aluno_curso.aluno_id
JOIN curso ON curso.id = aluno_curso.curso_id
GROUP BY 1
ORDER BY 1;

SELECT curso.nome,
COUNT(aluno.id)
FROM curso
LEFT JOIN aluno_curso ON aluno_curso.curso_id = curso.id
LEFT JOIN aluno ON aluno.id = aluno_curso.aluno_id
--WHERE curso.nome = 'JavaScript'
GROUP BY 1
HAVING COUNT(aluno.id) > 0;

SELECT nome,
COUNT(id)
FROM funcionarios
GROUP BY nome
HAVING COUNT(id) = 1;